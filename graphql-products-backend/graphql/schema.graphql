type Product {
    id: ID!
    name: String!
    description: String
    price: Float!
    category: Category! @belongsTo
    created_at: DateTime
    updated_at: DateTime
}

type Category {
    id: ID!
    name: String!
    products: [Product!]! @hasMany
    created_at: DateTime
    updated_at: DateTime
}

type Query {
    products: [Product!]! @all
    categories: [Category!]! @all
}

type Mutation {
    createProduct(input: CreateProductInput!): Product @create
# ========== INPUTS ==========
input CreateProductInput {
  name: String!
  description: String
  price: Float!
  category_id: ID!
}

input UpdateProductInput {
  id: ID!
  name: String
  description: String
  price: Float
  category_id: ID
}

input CreateCategoryInput {
  name: String!
}

input UpdateCategoryInput {
  id: ID!
  name: String!
}
    updateProduct(input: UpdateProductInput!): Product @update
    deleteProduct(id: ID!): Product @delete

    createCategory(input: CreateCategoryInput!): Category @create
    updateCategory(input: UpdateCategoryInput!): Category @update
}

scalar DateTime